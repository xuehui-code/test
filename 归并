    public static void mergeSort(long[] array) {
        mergeSortInternal(array, 0, array.length);
    }
 
    private static void mergeSortInternal(long[] array, int lowIndex, int highIndex) {
        int size = highIndex - lowIndex;
        if (size <= 1) {
            return;
        }
 
        int middleIndex = (lowIndex + highIndex) / 2;
        mergeSortInternal(array, lowIndex, middleIndex);
        mergeSortInternal(array, middleIndex, highIndex);
 
        合并两个有序区间(array, lowIndex, middleIndex, highIndex);
    }
 
    private static void 合并两个有序区间(long[] array, int lowIndex, int middleIndex, int highIndex) {
        int size = highIndex - lowIndex;
        long[] extraArray = new long[size];
 
        int leftIndex = lowIndex;
        int rightIndex = middleIndex;
        int extraIndex = 0;
 
        while (leftIndex < middleIndex && rightIndex < highIndex) {
            if (array[leftIndex] <= array[rightIndex]) {
                extraArray[extraIndex] = array[leftIndex];
                extraIndex++;
                leftIndex++;
            } else {
                extraArray[extraIndex] = array[rightIndex];
                extraIndex++;
                rightIndex++;
            }
        }
 
        if (leftIndex < middleIndex) {
            while (leftIndex < middleIndex) {
                extraArray[extraIndex++] = array[leftIndex++];
            }
        } else {
            while (rightIndex < highIndex) {
                extraArray[extraIndex++] = array[rightIndex++];
            }
        }
 
        // 最后，把数据从新数组统一搬回去
        for (int i = 0; i < size; i++) {
            array[i + lowIndex] = extraArray[i];
        }
    }
